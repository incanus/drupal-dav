<?php
// $Id$

/**
 * @file
 * Provides connectivity for the WebDAV protocol, enabling other modules to
 * export and use WebDAV resources.
 */

//////////////////////////////////////////////////////////////////////////////
// Module settings

define('DAV_ROOT',        variable_get('dav_root', 'dav'));
define('DAV_ROOT_MODULE', variable_get('dav_root_module', 'dav_fs'));
define('DAV_SERVER',      variable_get('dav_server', FALSE));
define('DAV_CLIENT',      variable_get('dav_client', FALSE));
define('DAV_DOT_FILES',   variable_get('dav_dot_files', TRUE));
define('DAV_TRACE',       variable_get('dav_trace', FALSE));
define('DAV_ENCODE',      variable_get('dav_encode', ' &<>|'));
define('DAV_CRON',        variable_get('dav_cron', TRUE));

define('DAV_WINDOWS_SERVER_DISCOVERY', variable_get('dav_windows_server_discovery', TRUE));
define('DAV_WINDOWS_BASIC_AUTH',       variable_get('dav_windows_basic_auth', TRUE));
define('DAV_WINDOWS_NO_THUMBS_DB',     variable_get('dav_windows_no_thumbs_db', TRUE));
define('DAV_MACOSX_NO_DS_STORE',       variable_get('dav_macosx_no_ds_store', TRUE));
define('DAV_MACOSX_NO_FORKS',          variable_get('dav_macosx_no_forks', TRUE));

define('DAV_PEAR_SERVER', 'http://pear.php.net/package/HTTP_WebDAV_Server');
define('DAV_PEAR_CLIENT', 'http://pear.php.net/package/HTTP_WebDAV_Client');

define('DAV_ROOT_COLLECTION', NULL);
define('DAV_TRANSIENT_RESOURCE', 'dav_blob');

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_help().
 */
function dav_help($path, $arg = NULL) {
  switch ($path) {
    case 'admin/settings/dav':
      return '<p>'. t('') .'</p>'; // TODO
  }
}

/**
 * Implementation of hook_perm().
 */
function dav_perm() {
  return array(
    'access DAV resources',
    'create DAV resources',
    'rename DAV resources',
    'move DAV resources',
    'update DAV resources',
    'delete DAV resources',
  );
}

/**
 * Implementation of hook_menu().
 */
function dav_menu() {
  return array(
    // DAV endpoint
    DAV_ROOT => array(
      'title' => 'DAV',
      'type' => MENU_CALLBACK,
      'access callback'  => 'is_bool',
      'access arguments' => array(TRUE), // further access controls are enforced in the DAV server
      'page callback' => 'dav_request',
    ),
    // Administer >> Site configuration >> DAV settings
    'admin/settings/dav' => array(
      'title' => 'DAV settings',
      'description' => 'Configure WebDAV server settings.',
      'access arguments' => array('administer site configuration'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dav_admin_settings'),
      'file' => 'dav.admin.inc',
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function dav_init() {
  if (DAV_CLIENT) {
    // Register the "webdav(s)://" PHP stream wrappers (aka fopen()
    // wrappers) using the PEAR WebDAV Client
    _dav_load_client();
  }
}

/**
 * Implementation of hook_cron().
 */
function dav_cron() {
  if (DAV_CRON) {
    // Purge all expired resource locks from the database
    db_query("DELETE FROM {dav_locks} WHERE expires_at < %d", time());
  }
}

/**
 * Implementation of hook_theme()
 */
function dav_theme() {
  return array(
    'dav_page' => array(
      'arguments' => array('path' => NULL, 'resources' => NULL),
      'file' => 'dav.theme.inc',
    ),
    'dav_resource' => array(
      'arguments' => array('path' => NULL, 'name' => NULL, 'resource' => NULL),
      'file' => 'dav.theme.inc',
    ),
    'dav_footer' => array(
      'arguments' => array(),
      'file' => 'dav.theme.inc',
    ),
  );
}

//////////////////////////////////////////////////////////////////////////////
// DAV API hooks (namespace/metadata)

/**
 * Implementation of hook_dav_lookup().
 */
function dav_dav_lookup($collection, $name) {
  global $user;

  if (_dav_is_transient_file($name)) {
    $resources = dav_dav_list($collection);
    return isset($resources[$name]) ? $resources[$name] : NULL;
  }
}

/**
 * Implementation of hook_dav_list().
 */
function dav_dav_list($collection) {
  global $user;

  $resources = array();
  if (($container_id = dav_intern_resource($collection, NULL, FALSE)) !== NULL) {
    $result = db_query("SELECT * FROM {dav_resources} WHERE type = '%s' AND `key` LIKE '%s'", DAV_TRANSIENT_RESOURCE, $container_id .'#%');
    while ($resource = db_fetch_object($result)) {
      if (($blob = db_fetch_object(db_query("SELECT * FROM {dav_blobs} WHERE resource_id = %d AND user_id = %d", $resource->id, $user->uid)))) {
        list(, $name) = explode('#', $resource->key, 2);
        $resources[$name] = array(DAV_TRANSIENT_RESOURCE, $resource->key);
      }
    }
  }
  return $resources;
}

/**
 * Implementation of hook_dav_propfind().
 */
function dav_dav_propfind($resource) {
  global $user;

  list($type, $key) = $resource;
  $props = array();
  switch ($type) {
    // Somebody has to provide the metadata for the root collection, so we
    // might as well do it right here to save DAV modules the trouble.
    case DAV_ROOT_COLLECTION:
      $props['displayname']      = '/';
      $props['creationdate']     = time();
      $props['getlastmodified']  = time();
      $props['resourcetype']     = 'collection';
      $props['getcontenttype']   = 'httpd/unix-directory';
      break;
    case DAV_TRANSIENT_RESOURCE:
      if (($blob = _dav_get_transient_blob($resource))) {
        list(, $name) = explode('#', $key, 2);
        $props['displayname']      = $name;
        $props['creationdate']     = time();
        $props['getlastmodified']  = time();
        $props['resourcetype']     = '';
        $props['getcontenttype']   = $blob->content_type;
        $props['getcontentlength'] = $blob->content_length;
      }
      break;
    default:
      // TODO: Obtain arbitrary properties for arbitrary resources
      break;
  }
  return $props;
}

//////////////////////////////////////////////////////////////////////////////
// DAV API hooks (verbs)

/**
 * Implementation of hook_dav_get().
 */
function dav_dav_get($resource, &$options) {
  global $user;

  if (_dav_is_transient_resource($resource)) {
    if (($blob = _dav_get_transient_blob($resource))) {
      $options['mtime'] = time();
      $options['mimetype'] = $blob->content_type;
      $options['size'] = $blob->content_length;
      $options['data'] = $blob->content;
      return $options;
    }
    return FALSE;
  }
}

/**
 * Implementation of hook_dav_put().
 */
function dav_dav_put($container, $name, &$options, $filepath = NULL) {
  global $user;

  if (_dav_is_transient_file($name)) {
    if (empty($filepath)) { // pre-process upload
      return TRUE; // accept the file upload
    }
    else { // post-process upload
      $resource = array(DAV_TRANSIENT_RESOURCE, dav_intern_resource($container) .'#'. $name);
      $resource_id = dav_intern_resource($resource, 'dav');
      return db_query("REPLACE INTO {dav_blobs} (resource_id, user_id, content_type, content_length, content) VALUES (%d, %d, '%s', %d, %b)", $resource_id, $user->uid, $options['content_type'], filesize($filepath), file_get_contents($filepath));
    }
  }
}

/**
 * Implementation of hook_dav_delete().
 */
function dav_dav_delete($resource, $container, $move = FALSE) {
  global $user;

  if (_dav_is_transient_resource($resource)) {
    if (($resource_id = dav_intern_resource($resource, NULL, FALSE))) {
      db_query("DELETE FROM {dav_blobs} WHERE resource_id = %d AND user_id = %d", $resource_id, $user->uid);
      db_query("DELETE FROM {dav_resources} WHERE id = %d", $resource_id); // Hmm
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Implementation of hook_dav_rename().
 */
function dav_dav_rename($resource, $source_name, $target_name) {
  global $user;

  // TODO: if attempting to rename to non-transient name, we should probably
  // perform an internal PUT request to handle it correctly
  if (_dav_is_transient_resource($resource)) {
    if (($resource_id = dav_intern_resource($resource, NULL, FALSE))) {
      $key = str_replace($source_name, $target_name, $resource[1]);
      db_query("UPDATE {dav_resources} SET `key` WHERE id = %d", $key, $resource_id);
      return TRUE;
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
// DAV module implementation

/**
 * Menu callback dispatching an incoming DAV request to the
 * HTTP_WebDAV_Server-based implementation class.
 */
function dav_request() {
  // If DAV server functionality has been disabled, we'll just spew out a
  // 404 Not Found and pretend this never happened.
  if (!DAV_SERVER) {
    return drupal_not_found();
  }

  // Make sure the administrator understands that installing
  // HTTP_WebDAV_Server really is not merely optional...
  if (!_dav_load_server()) {
    watchdog('dav', 'Unable to serve DAV request because the PEAR HTTP_WebDAV_Server library is not available.', array(), WATCHDOG_ERROR);
    return drupal_access_denied();
  }

  // Make sure that at least one (other) module implements our API:
  if (count(module_implements('dav_lookup')) < 2) {
    watchdog('dav', 'Unable to serve DAV request because no modules implementing the DAV API are available.', array(), WATCHDOG_ERROR);
    return drupal_access_denied();
  }

  // Calculate the request path for DAV.
  $path = substr($_GET['q'], strlen(DAV_ROOT));
  $path = !empty($path) ? $path : '/';

  // Redirect to a URL ending in a slash if at the top level.
  // This prevents some relative linking problems further down.
  if ($path == '/' && !preg_match("/\/$/", $_SERVER['REQUEST_URI'])) {
    drupal_goto(DAV_ROOT .'/', NULL, NULL, 301);
  }

  // All is green, so boot us up to DAV specs and hand over the reins to our
  // bastard OO offspring of HTTP_WebDAV_Server, pretty much ending Drupal's
  // active involvement in serving the request:
  module_load_include('inc', 'dav');
  drupal_dav_server::serve(url(DAV_ROOT), $path);
}

//////////////////////////////////////////////////////////////////////////////
// DAV core helpers

function dav_get_modules($op = NULL) {
  switch ($op) {
    case 'info':
      $modules = dav_get_modules();
      if (!empty($modules)) {
        $result = db_query("SELECT name, info FROM {system} WHERE type = 'module' AND name IN (". db_placeholders($modules, 'varchar') .") ORDER BY weight ASC", $modules);
        while ($row = db_fetch_object($result)) {
          $modules[$row->name] = (object)unserialize($row->info);
        }
      }
      return $modules;
    case 'titles':
      $modules = dav_get_modules('info');
      foreach ($modules as $name => $info) {
        $modules[$name] = $info->name;
      }
      return $modules;
    case 'names':
    default:
      $modules = array_diff(module_implements('dav_list'), array('dav'));
      return array_combine($modules, $modules);
  }
}

function _dav_is_transient_file($name) {
  return ($name[0] == '.'); // TODO
}

function _dav_is_transient_resource($resource) {
  return is_array($resource) && $resource[0] == DAV_TRANSIENT_RESOURCE;
}

function _dav_get_transient_blob($resource) {
  global $user;
  if (_dav_is_transient_resource($resource)) {
    if (($resource_id = dav_intern_resource($resource, NULL, FALSE)) !== NULL) {
      if (($blob = db_fetch_object(db_query("SELECT * FROM {dav_blobs} WHERE resource_id = %d AND user_id = %d", $resource_id, $user->uid)))) {
        $blob->content = db_decode_blob($blob->content);
        return $blob;
      }
    }
  }
}

function _dav_authenticate($name, $pass) {
  // This is an ugly special case to support the LDAP auth module, which
  // does not use Drupal's innate authentication API.
  if (function_exists('ldapauth_authenticate')) {
    // ldapauth_authenticate() sets the global $user variable if successful
    ldapauth_authenticate(array('name' => $name, 'pass' => $pass));
    return $GLOBALS['user'];
  }
  else {
    // user_authenticate() returns a $user object
    return user_authenticate(array('name' => $name, 'pass' => $pass));
  }
}

function _dav_init_include_path() {
  static $done = FALSE;
  if (!$done) {
    set_include_path(dirname(__FILE__) .'/vendor'. PATH_SEPARATOR . get_include_path());
    $done = TRUE;
  }
}

function _dav_load_server() {
  _dav_init_include_path();
  return (@include_once('HTTP/WebDAV/Server.php')) !== FALSE;
}

function _dav_load_client() {
  _dav_init_include_path();
  return (@include_once('HTTP/WebDAV/Client.php')) !== FALSE;
}
